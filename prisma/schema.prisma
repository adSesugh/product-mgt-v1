// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Employee {
  id          String  @id @default(cuid())
  first_name  String
  middle_name String?
  last_name   String

  jobRoleId String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  JobRole   JobRole[]

  @@map("employees")
}

model JobRole {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  salary      Decimal   @default(0.00)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  employee    Employee? @relation(fields: [employeeId], references: [id])
  employeeId  String?   @unique

  @@map("job_roles")
}

model Product {
  id            String    @id @default(uuid())
  name          String    @unique
  price         Decimal   @default(0.00)
  description   String?
  barcode       String?
  qty           Int
  expiry        DateTime?
  reorder_level Int       @default(10)
  qty_sold      Int       @default(0)
  min_qty       Int       @default(15)
  picture       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  User          User?     @relation(fields: [userId], references: [id])
  userId        String?
  status        String    @default("In-Stock")

  @@map("products")
}
